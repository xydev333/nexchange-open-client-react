import React, { Component } from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
<<<<<<< HEAD:src/components/Home/Hero/ExchangeWidget/WalletAddress/WalletAddress.js
import { errorAlert, setWallet } from 'Actions/index.js';
import validateWalletAddress from 'Utils/validateWalletAddress';
=======
import { I18n, Interpolate } from 'react-i18next';
import { errorAlert, setWallet } from '../actions/index.js';
import validateWalletAddress from '../helpers/validateWalletAddress';
import i18n from '../i18n';
>>>>>>> Translated further components:src/containers/WalletAddress.js

class WalletAddress extends Component {
  constructor(props) {
    super(props);

    this.state = { address: '' };
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleChange(event) {
    let address = event.target.value.replace(new RegExp(/ /g, 'g'), '');
    const valid = validateWalletAddress(
      address,
      this.props.selectedCoin.receive,
      () =>
        this.props.errorAlert({
          show: true,
<<<<<<< HEAD:src/components/Home/Hero/ExchangeWidget/WalletAddress/WalletAddress.js
          message: `${address} is not a valid ${this.props.selectedCoin.receive} address.`,
=======
          message: `${address} ${i18n.t('error.novalid')} ${
            this.props.selectedCoin.receive
          } ${i18n.t('generalterms.address')}.`,
>>>>>>> Translated further components:src/containers/WalletAddress.js
        }),
      () => this.props.errorAlert({ show: false })
    );

    this.setState({ address });

    this.props.setWallet({
      address: address,
      valid: valid,
      show: true,
    });
  }

  handleSubmit(event) {
    event.preventDefault();
    this.props.onSubmit();
  }

  UNSAFE_componentWillMount() {
    this.props.setWallet({ address: '', valid: false, show: false });
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
<<<<<<< HEAD:src/components/Home/Hero/ExchangeWidget/WalletAddress/WalletAddress.js
    if (nextProps.wallet.address != null && nextProps.wallet.address != this.state.address) {
=======
    if (
      nextProps.wallet.address != null &&
      nextProps.wallet.address !== this.state.address
    ) {
>>>>>>> Translated further components:src/containers/WalletAddress.js
      this.setState({ address: nextProps.wallet.address });
    }
  }

  render() {
    return (
<<<<<<< HEAD:src/components/Home/Hero/ExchangeWidget/WalletAddress/WalletAddress.js
      <div id="wallet-address" className={this.props.wallet.show ? 'col-xs-12 active' : 'col-xs-12'}>
        <form className="form-group label-floating has-warning" onSubmit={this.handleSubmit}>
=======
	<I18n ns="translations">
	{(t) => (
      <div
        id="wallet-address"
        className={this.props.wallet.show ? 'col-xs-12 active' : 'col-xs-12'}
      >
        <form
          className="form-group label-floating has-warning"
          onSubmit={this.handleSubmit}
        >
>>>>>>> Translated further components:src/containers/WalletAddress.js
          <label htmlFor="withdraw-addr" className="control-label text-green">
            <Interpolate i18nKey="generalterms.youraddress" selectedCoin={this.props.selectedCoin.receive} />
            {/* 
             =>
               Your selectedCoin Address
            */}
          </label>

          <input
            type="text"
            ref={this.props.inputRef}
            className="form-control addr"
            id="withdraw-addr"
            onChange={this.handleChange}
            value={this.state.address}
          />
        </form>
      </div>
	)}
	</I18n>
    );
  }
}

function mapStateToProps(state) {
  return {
    selectedCoin: state.selectedCoin,
    wallet: state.wallet,
  };
}

function mapDispatchToProps(dispatch) {
  return bindActionCreators(
    {
      errorAlert: errorAlert,
      setWallet: setWallet,
    },
    dispatch
  );
}

<<<<<<< HEAD:src/components/Home/Hero/ExchangeWidget/WalletAddress/WalletAddress.js
export default connect(
  mapStateToProps,
  mapDispatchToProps
)(WalletAddress);
=======
export default connect(mapStateToProps, mapDispatchToProps)(WalletAddress);
>>>>>>> Translated further components:src/containers/WalletAddress.js
